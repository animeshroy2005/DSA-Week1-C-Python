# 1 Insert an element at end of array
// C
#include <stdio.h>
#include <stdlib.h>
int main() {
    int n = 5;
    int capacity = 10;
    int *arr = malloc(sizeof(int)*capacity);
    arr[0]=1; arr[1]=2; arr[2]=3; arr[3]=4; arr[4]=5;
    int x = 99;
    if (n < capacity) {
        arr[n++] = x;
    } else {
        capacity *= 2;
        arr = realloc(arr, sizeof(int)*capacity);
        arr[n++] = x;
    }
    for (int i=0;i<n;i++) printf("%d ", arr[i]);
    printf("\n");
    free(arr);
    return 0;
}
# Python
arr = [1,2,3,4,5]
x = 99
arr.append(x)
print(arr)

# 2 Find largest element in array
// C
#include <stdio.h>
int main() {
    int arr[] = {3, 7, 2, 9, 4};
    int n = sizeof(arr)/sizeof(arr[0]);
    int mx = arr[0];
    for (int i=1;i<n;i++) if (arr[i] > mx) mx = arr[i];
    printf("%d\n", mx);
    return 0;
}
# Python
arr = [3,7,2,9,4]
print(max(arr))
mx = arr[0]
for v in arr[1:]:
    if v > mx: mx = v
print(mx)

# 3 Find second largest element
// C
#include <stdio.h>
#include <limits.h>
int main() {
    int arr[] = {5, 1, 5, 3, 4};
    int n = sizeof(arr)/sizeof(arr[0]);
    int first = INT_MIN, second = INT_MIN;
    for (int i=0;i<n;i++){
        if (arr[i] > first) {
            second = first;
            first = arr[i];
        } else if (arr[i] > second && arr[i] < first) {
            second = arr[i];
        }
    }
    if (second == INT_MIN) printf("No second largest\n");
    else printf("%d\n", second);
    return 0;
}
# Python
arr = [5,1,5,3,4]
first = second = float('-inf')
for x in arr:
    if x > first:
        second = first
        first = x
    elif x > second and x < first:
        second = x
if second == float('-inf'):
    print("No second largest")
else:
    print(second)

# 4 Move all zeros to end
// C
#include <stdio.h>
void moveZerosToEnd(int arr[], int n) {
    int j = 0;
    for (int i=0;i<n;i++) {
        if (arr[i] != 0) arr[j++] = arr[i];
    }
    while (j < n) arr[j++] = 0;
}
int main() {
    int arr[] = {0,1,0,3,12};
    int n = sizeof(arr)/sizeof(arr[0]);
    moveZerosToEnd(arr,n);
    for (int i=0;i<n;i++) printf("%d ", arr[i]);
    printf("\n");
    return 0;
}
# Python
arr = [0,1,0,3,12]
j = 0
for x in arr:
    if x != 0:
        arr[j] = x
        j += 1
while j < len(arr):
    arr[j] = 0
    j += 1
print(arr)

# 5 Rotate array by one
// C
#include <stdio.h>
void rotateByOne(int arr[], int n) {
    if (n<=1) return;
    int last = arr[n-1];
    for (int i=n-1;i>0;i--) arr[i] = arr[i-1];
    arr[0] = last;
}
int main() {
    int arr[] = {1,2,3,4,5};
    int n = sizeof(arr)/sizeof(arr[0]);
    rotateByOne(arr,n);
    for (int i=0;i<n;i++) printf("%d ", arr[i]);
    printf("\n");
    return 0;
}
# Python
arr = [1,2,3,4,5]
if arr:
    last = arr[-1]
    for i in range(len(arr)-1,0,-1):
        arr[i] = arr[i-1]
    arr[0] = last
print(arr)

# 6 Check if array is sorted and rotated
// C
#include <stdio.h>
int isSortedAndRotated(int arr[], int n) {
    int cnt = 0;
    for (int i=0;i<n;i++){
        if (arr[i] > arr[(i+1)%n]) cnt++;
        if (cnt > 1) return 0;
    }
    return 1;
}
int main() {
    int arr[] = {3,4,5,1,2};
    int n = sizeof(arr)/sizeof(arr[0]);
    printf(isSortedAndRotated(arr,n) ? "True\n" : "False\n");
    return 0;
}
# Python
def is_sorted_and_rotated(arr):
    n = len(arr)
    cnt = 0
    for i in range(n):
        if arr[i] > arr[(i+1)%n]:
            cnt += 1
            if cnt > 1:
                return False
    return True
print(is_sorted_and_rotated([3,4,5,1,2]))

# 7 Reverse a string
// C
#include <stdio.h>
#include <string.h>
int main() {
    char s[] = "hello";
    int i = 0, j = strlen(s)-1;
    while (i < j) {
        char t = s[i]; s[i] = s[j]; s[j] = t;
        i++; j--;
    }
    printf("%s\n", s);
    return 0;
}
# Python
s = "hello"
print(s[::-1])
lst = list(s)
i, j = 0, len(lst)-1
while i < j:
    lst[i], lst[j] = lst[j], lst[i]
    i += 1; j -= 1
print(''.join(lst))

# 8 Check if string is palindrome
// C
#include <stdio.h>
#include <string.h>
int isPalindrome(char *s) {
    int i=0, j=strlen(s)-1;
    while (i<j) {
        if (s[i] != s[j]) return 0;
        i++; j--;
    }
    return 1;
}
int main() {
    char s[] = "racecar";
    printf(isPalindrome(s) ? "Yes\n" : "No\n");
    return 0;
}
# Python
s = "racecar"
print("Yes" if s == s[::-1] else "No")

# 9 Count frequency of array elements
// C
#include <stdio.h>
#include <stdlib.h>
int cmp(const void *a, const void *b){ return (*(int*)a - *(int*)b); }
int main(){
    int arr[] = {1,2,2,3,1,4,2};
    int n = sizeof(arr)/sizeof(arr[0]);
    qsort(arr, n, sizeof(int), cmp);
    int count = 1;
    for (int i=1;i<=n;i++){
        if (i<n && arr[i]==arr[i-1]) count++;
        else {
            printf("%d -> %d\n", arr[i-1], count);
            count = 1;
        }
    }
    return 0;
}
# Python
from collections import Counter
arr = [1,2,2,3,1,4,2]
freq = Counter(arr)
for k,v in freq.items():
    print(k, "->", v)

# 10 Hackerrank: Arrays - DS
// C
#include <stdio.h>
int main() {
    int n;
    if (scanf("%d", &n)!=1) return 0;
    int arr[n];
    for (int i=0;i<n;i++) scanf("%d", &arr[i]);
    for (int i=n-1;i>=0;i--) {
        printf("%d", arr[i]);
        if (i>0) printf(" ");
    }
    printf("\n");
    return 0;
}
# Python
n = int(input().strip())
arr = list(map(int, input().split()))
print(' '.join(map(str, arr[::-1])))